---
description: 
globs: 
alwaysApply: false
---
# Best Practices Guide

This document outlines the core best practices and patterns used in our codebase.

## Type Hints

1. **Always Use Type Hints**
   - Every function parameter must be typed
   - Every function return must be typed
   - Use type hints for all variables where type is not obvious

2. **StrEnum**
    If you want to use StrEnum, import it from `pipelex.types`
   ```python
   from pipelex.types import StrEnum
   ```

## Factory Pattern

1. **Use Factory Pattern for Object Creation**
   - Create factories when dealing with multiple implementations

## Documentation

1. **Docstring Format**
   - Quick description of the function/class
   - List args and their types
   - Document return values
   - Example:
   ```python
   def process_image(image_path: str, size: Tuple[int, int]) -> bytes:
       """Process and resize an image.
       
       Args:
           image_path: Path to the source image
           size: Tuple of (width, height) for resizing
           
       Returns:
           Processed image as bytes
       """
       pass
   ```

2. **Class Documentation**
   - Document class purpose and behavior
   - Include examples if complex
   ```python
   class ImageProcessor:
       """Handles image processing operations.
       
       Provides methods for resizing, converting, and optimizing images.
       """
   ```

## Custom Exceptions

1. **Graceful Error Handling**
   - Use try/except blocks with specific exceptions
   - Convert third-party exceptions to custom ones
   ```python
   try:
       from fal_client import AsyncClient as FalAsyncClient
   except ImportError as exc:
       raise MissingDependencyError(
           "fal-client", "fal", 
           "The fal-client SDK is required to use FAL models."
       ) from exc
   ```

## Pipelines

Always run the cli `pipelex validate` when you are finished writing pipelines: This checks for errors. If there are errors, iterate.